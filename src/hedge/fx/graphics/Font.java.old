package hedge.fx.graphics;

import hedge.fx.io.files.FileHandle;
import hedge.fx.util.IOUtils;
import org.lwjgl.BufferUtils;
import org.lwjgl.stb.STBTTBakedChar;
import org.lwjgl.stb.STBTTPackContext;
import org.lwjgl.stb.STBTTPackRange;
import org.lwjgl.stb.STBTTPackedchar;

import java.io.IOException;
import java.nio.ByteBuffer;

import static org.lwjgl.stb.STBTruetype.*;

public class Font {
	
	private static final int CharBufferSize = 6;
	
	//private static final int AtlasWidth = 512 + 128;
	//private static final int AtlasHeight = 512 + 128;
	
	private static final int AtlasWidth = 512;
	private static final int AtlasHeight = 512;
	
	public static final String Ascii = "\u0000ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"!`?'.,;:()[]{}<>|/@\\^$â‚¬-%+=#_&~*\u0080" +
											   "\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008A\u008B\u008C\u008D\u008E\u008F\u0090\u0091" +
											   "\u0092\u0093\u0094\u0095\u0096\u0097\u0098\u0099\u009A\u009B\u009C\u009D\u009E\u009F\u00A0\u00A1\u00A2" +
											   "\u00A3\u00A4\u00A5\u00A6\u00A7\u00A8\u00A9\u00AA\u00AB\u00AC\u00AD\u00AE\u00AF\u00B0\u00B1\u00B2\u00B3" +
											   "\u00B4\u00B5\u00B6\u00B7\u00B8\u00B9\u00BA\u00BB\u00BC\u00BD\u00BE\u00BF\u00C0\u00C1\u00C2\u00C3\u00C4" +
											   "\u00C5\u00C6\u00C7\u00C8\u00C9\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D0\u00D1\u00D2\u00D3\u00D4\u00D5" +
											   "\u00D6\u00D7\u00D8\u00D9\u00DA\u00DB\u00DC\u00DD\u00DE\u00DF\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6" +
											   "\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F2\u00F3\u00F4\u00F5\u00F6\u00F7" +
											   "\u00F8\u00F9\u00FA\u00FB\u00FC\u00FD\u00FE\u00FF";
	
	private STBTTPackedchar.Buffer charData;
	//private STBTTBakedChar.Buffer data;
	
	private Texture texture;
	public Texture getTexture() { return texture; }
	
	public Font(FileHandle file, int size, boolean antiAlias) {
		this(file, size, antiAlias, Ascii);
	}
	
	public Font(FileHandle file, int size, boolean antiAlias, String characters) {
		/*float[] scale = {
				size,
				size
		};
		
		///data = STBTTPackedchar.malloc(CharBufferSize * characters.length());
		data = STBTTBakedChar.malloc(characters.length());
		var buffer = IOUtils.ioResourceToByteBuffer("PIXELADE.TTF", 512 * 1024);//file.readByteBuffer(); // maybe will work
		var bitmap = BufferUtils.createByteBuffer(AtlasWidth * AtlasHeight);
		
		stbtt_BakeFontBitmap(buffer, size, bitmap, AtlasWidth, AtlasHeight, 0, data);
		
		//stbtt_BakeFontBitmap();
		
		texture = new Texture(AtlasWidth, AtlasHeight, bitmap);
		System.out.println("Handle: " + texture.getHandle());*/
		
		/*STBTTBakedChar.Buffer cdata = STBTTBakedChar.malloc(96);
		var buffer = file.readByteBuffer(); // maybe will work
		var bitmap = BufferUtils.createByteBuffer(AtlasWidth * AtlasHeight);
		stbtt_BakeFontBitmap(buffer, size, bitmap, AtlasWidth, AtlasHeight, 32, cdata);*/
		
		/*STBTTBakedChar.Buffer cdata = STBTTBakedChar.malloc(characters.length());
		var buffer = file.readByteBuffer(); // maybe will work
		var bitmap = BufferUtils.createByteBuffer(AtlasWidth * AtlasHeight);
		stbtt_BakeFontBitmap(buffer, size, bitmap, AtlasWidth, AtlasHeight, 0, cdata);
		
		texture = new Texture(AtlasWidth, AtlasHeight, bitmap);*/
		
		float[] scale = {
				size,
				size
		};
		
		charData = STBTTPackedchar.malloc(CharBufferSize * 128);
		
		try (STBTTPackContext pc = STBTTPackContext.malloc()) {
			ByteBuffer ttf = file.readByteBuffer();//ioResourceToByteBuffer("demo/FiraSans.ttf", 512 * 1024);
			
			ByteBuffer bitmap = BufferUtils.createByteBuffer(AtlasWidth * AtlasHeight);
			
			stbtt_PackBegin(pc, bitmap, AtlasWidth, AtlasHeight, 0, 1, 0);
			for (int i = 0; i < 2; i++) {
				int p = (i * 3 + 0) * 128 + 32;
				charData.limit(p + 95);
				charData.position(p);
				stbtt_PackSetOversampling(pc, 1, 1);
				stbtt_PackFontRange(pc, ttf, 0, scale[i], 32, charData);
				
				p = (i * 3 + 1) * 128 + 32;
				charData.limit(p + 95);
				charData.position(p);
				stbtt_PackSetOversampling(pc, 2, 2);
				stbtt_PackFontRange(pc, ttf, 0, scale[i], 32, charData);
				
				p = (i * 3 + 2) * 128 + 32;
				charData.limit(p + 95);
				charData.position(p);
				stbtt_PackSetOversampling(pc, 3, 1);
				stbtt_PackFontRange(pc, ttf, 0, scale[i], 32, charData);
			}
			charData.clear();
			stbtt_PackEnd(pc);
			
			texture = new Texture(AtlasWidth, AtlasHeight, bitmap);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}
